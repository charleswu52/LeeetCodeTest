package leetcode_hot100.top40;

/**
 * @author WuChao
 * @create 2021/7/13 9:13
 */
public class _96 {
    /**
     * Leetcode 热题 Top 100
     * <p>
     * 96. 不同的二叉搜索树
     * 难度：medium
     * <p>
     * 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。
     * <p>
     * 示例
     * 输入：n = 3
     * 输出：5
     * <p>
     * 输入：n = 1
     * 输出：1
     *
     * <p>
     * 范围：
     * 1 <= n <= 19
     */

    /*
    题目解析：题目易懂就是求n个节点的二叉搜索树的种类

    思路1：动态规划
    令 G(n): 长度为 n 的序列能构成的不同二叉搜索树的个数。
    F(i,n): 以 i 为根、序列长度为 n 的不同二叉搜索树个数 (1≤i≤n)。
    G(n) 可以从 F(i, n) 得到，而 F(i, n) 又会递归地依赖于 G(n)。
    那么求不同的二叉搜索树的总数 G(n)，就是对遍历所有 (1≤i≤n) 的 F(i,n) 之和。

    对于边界情况，当序列长度为 1（只有根）或为 0（空树）时，只有一种情况
    G(0)=1,G(1)=1
    给定序列 1⋯n，我们选择数字 i 作为根，则根为 i 的所有二叉搜索树的集合是左子树集合和右子树集合的笛卡尔积
    ，对于笛卡尔积中的每个元素，加上根节点之后形成完整的二叉搜索树，可以得到以下公式：
    F(i,n)=G(i−1)⋅G(n−i)

    综上，可得到 G(n)的递归表达式为 ：G(n) = i:1->n G(i-1)*G(n-i)
     */
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }

    /*
    思路2：数学
    上述思路推导出的 G(n)函数的值在数学上被称为卡塔兰数 C_n，公式为：
    C_0 = 1
    C_n+1 = 2(2n+1)/(n+2)*C_n
     */
    public int numTrees2(int n) {
        long c = 1;
        for (int i = 0; i < n; i++) {
            c = c * 2 * (2 * i + 1) / (i + 2);
        }
        return (int) c;

    }


}
