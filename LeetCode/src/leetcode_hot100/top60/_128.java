package leetcode_hot100.top60;

import java.util.HashSet;
import java.util.Set;

public class _128 {
    /**
     * Leetcode 热题 Top 100
     * <p>
     * 128. 最长连续序列
     * 难度：medium
     * <p>
     * 给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。
     * 进阶：你可以设计并实现时间复杂度为 O(n) 的解决方案吗？
     * <p>
     * 示例：
     * 输入：nums = [100,4,200,1,3,2]
     * 输出：4
     * <p>
     * 输入：nums = [0,3,7,2,5,8,4,6,0,1]
     * 输出：9
     * <p>
     * 数据范围:
     * 0 <= nums.length <= 104
     * -109 <= nums[i] <= 109
     */

    /*
    题目分析：
    题目意思是从一个无序的数组中找连续数字子序列的最大序列长度，不要求下标连续只要求数字是连续出现即递增，而且间隔为1 不包含重复数字

    思路：
    最简单直接的一个思路就是先排序然后再遍历一遍统计连续数字序列的最大长度
    但这样的时间复杂度不是O(n),因为需要排序，快排复杂度是O(nlogn)

    因此需要思考别的思路，

    思路：使用哈希表
    我们考虑枚举数组中的每个数 x，考虑以其为起点，不断尝试匹配 x+1, x+2,⋯ 是否存在，假设最长匹配到了 x+y，
    那么以 x 为起点的最长连续序列即为 x, x+1, x+2, ,⋯,x+y，其长度为 y+1，我们不断枚举并更新答案即可。

    对于匹配的过程，暴力的方法是 O(n) 遍历数组去看是否存在这个数，但其实更高效的方法是用一个哈希表存储数组中的数，
    这样查看一个数是否存在即能优化至 O(1) 的时间复杂度。

    仅仅是这样我们的算法时间复杂度最坏情况下还是会达到 O(n^2)（即外层需要枚举 O(n) 个数，内层需要暴力匹配 O(n) 次），无法满足题目的要求。

    但仔细分析这个过程，我们会发现其中执行了很多不必要的枚举，如果已知有一个 x, x+1, x+2,⋯,x+y 的连续序列，而我们却重新从 x+1，x+2
    或者是 x+y 处开始尝试匹配，那么得到的结果肯定不会优于枚举 x 为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可。

    那么怎么判断是否跳过呢？由于我们要枚举的数 x 一定是在数组中不存在前驱数 x−1 的，不然按照上面的分析我们会从 x−1 开始尝试匹配，
    因此我们每次在哈希表中检查是否存在 x−1 即能判断是否需要跳过了。
     */
    public int longestConsecutive(int[] nums) {
        // 先用 Set把数组中的数存储，保证是不重复的
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int res = 0;
        // 遍历每个元素
        for (int num : set) {
            // 保证该元素前面的数不存在，然后循环向后加判断以当前数起始的序列长度是多少
            if (!set.contains(num - 1)) {
                int curNum = num;
                int curLength = 1;
                while (set.contains(curNum + 1)) {
                    curNum = curNum + 1;
                    curLength += 1;
                }
                res = Math.max(res, curLength);
            }
        }
        return res;

    }
}
