package leetcode_hot100.top80;

/**
 * @author WuChao
 * @create 2021/7/20 12:02
 */
public class _238 {
    /**
     * Leetcode 热题 Top 100
     * <p>
     * 238. 除自身以外数组的乘积
     * 难度：medium
     * <p>
     * 给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，
     * 其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。
     * <p>
     * 示例 1:
     * 输入: [1,2,3,4]
     * 输出: [24,12,8,6]
     *
     * <p>
     * 提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。
     *
     * 说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。
     *
     * 进阶：
     * 你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）
     */

    /*
    题目解析：

    题目有这么几个需求：
        1. 不允许使用除法
        2. 时间复杂度为O(n)
        3. 空间复杂度为O(1)

     思路：
        前缀后缀左右乘积列表（使用结果数组来当这个辅助数组，不算空间占用）
        由于输出数组不算在空间复杂度内，那么我们可以将前缀后缀乘积数组 L 或 R 数组用输出数组来计算。
        先把输出数组当作 L 数组来计算，然后再动态构造 R 数组得到结果。让我们来看看基于这个思想的算法。

        1. 初始化 answer 数组，对于给定索引 i，answer[i] 代表的是 i 左侧所有数字的乘积。
        2. 构造方式与之前相同，只是我们试图节省空间，先把 answer 作为方法一的 L 数组。
        3. 这种方法的唯一变化就是我们没有构造 R 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组
                answer[i] = answer[i]∗R。然后 R 更新为 R=R∗nums[i]，其中变量 R 表示的就是索引右侧数字的乘积。
     */

    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] res = new int[len];

        // 先算左边前缀乘积
        // 0的左边没有元素，所以 res[0] = 1
        res[0] = 1;
        for (int i = 1; i < len; i++) {
            res[i] = nums[i - 1] * res[i - 1];
        }

        // r 定义为右侧的所有元素
        int r = 1;
        for (int i = len - 1; i >= 0; i--) {
            res[i] = res[i] * r;
            r *= nums[i];
        }

        return res;

    }
}
