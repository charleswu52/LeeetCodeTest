package leetcode_hot100.top80;

/**
 * @author WuChao
 * @create 2021/7/21 11:22
 */
public class _287 {
    /**
     * Leetcode 热题 Top 100
     * <p>
     * 287. 寻找重复数
     * 难度：medium
     * <p>
     * 给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。
     *
     * 假设 nums 只有 一个重复的整数 ，找出 这个重复的数 。
     *
     * 你设计的解决方案必须不修改数组 nums 且只用常量级 O(1) 的额外空间。
     *
     * 示例 1：
     *
     * 输入：nums = [1,3,4,2,2]
     * 输出：2
     *
     * 示例 2：
     * 输入：nums = [3,1,3,4,2]
     * 输出：3
     *
     * 示例 3：
     * 输入：nums = [1,1]
     * 输出：1
     *
     * 示例 4：
     * 输入：nums = [1,1,2]
     * 输出：1
     *
     *
     * 提示：
     *
     * 1 <= n <= 105
     * nums.length == n + 1
     * 1 <= nums[i] <= n
     * nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次
     *
     *
     * 进阶：
     *
     * 如何证明 nums 中至少存在一个重复的数字?
     * 你可以设计一个线性级时间复杂度 O(n) 的解决方案吗？
     */

    /*
    思路：快慢指针（参考环形链表）
    它的思想属于 Floyd 判圈算法
    快慢指针，一个时间复杂度为O(N)的算法。

    其一，对于链表问题，使用快慢指针可以判断是否有环。

    其二，本题可以使用数组配合下标，抽象成链表问题。但是难点是要定位环的入口位置。

        举个例子：nums = [2,5, 9 ,6,9,3,8, 9 ,7,1]，构造成链表就是：2->[9]->1->5->3->6->8->7->[9]，也就是在[9]处循环。

    其三，快慢指针问题，会在环内的[9]->1->5->3->6->8->7->[9]任何一个节点追上，不一定是在[9]处相碰，事实上会在7处碰上。

    其四，必须另起一个for循环定位环入口位置[9]。这里需要数学证明。

    对“其四”简单说明一下，既然快慢指针在环内的某处已经相碰了。那么，第二个for循环遍历时，res指针还是在不停的绕环走，但是必定和i指针在环入口处相碰。
     */

    public int findDuplicate(int[] nums) {
        int slow = nums[0], fast = nums[nums[0]];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        slow = 0;   //重回起点
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;



    }
}
