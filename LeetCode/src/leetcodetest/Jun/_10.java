package leetcodetest.Jun;

/**
 * @author WuChao
 * @create 2021/6/10 上午7:54
 */
public class _10 {
    /**
     * 每日一题：2021/6/9
     * 518. 零钱兑换 II
     * 难度: medium
     * <p>
     * 集团里有 n 名员工，他们可以完成各种各样的工作创造利润。
     * <p>
     * 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。
     *
     * <p>
     * 示例:
     * 输入: amount = 5, coins = [1, 2, 5]
     * 输出: 4
     * 解释: 有四种方式可以凑成总金额:
     * 5=5
     * 5=2+2+1
     * 5=2+1+1+1
     * 5=1+1+1+1+1
     * <p>
     * 输入: amount = 3, coins = [2]
     * 输出: 0
     * 解释: 只用面额2的硬币不能凑成总金额3。
     * <p>
     * 数据范围：
     * 0 <= amount (总金额) <= 5000
     * 1 <= coin (硬币面额) <= 5000
     * 硬币种类不超过 500 种
     * 结果符合 32 位符号整数
     */

    /*
    题目解析：
    简单的动态规划题目，
     */

    /*
    思路：动态规划
    dp[i] 表示金额之和等于i的硬币的组合数，目标是求dp[amount].
    动态规划的边界是 dp[0]=1。只有当不选取任何硬币时，金额之和才为 0，因此只有 1 种硬币组合。
    对于面额为 coin 的硬币，当 coin≤i≤amount 时，如果存在一种硬币组合的金额之和等于 i−coin，则在该硬币组合中增加一个面额为 coin 的硬币，
    即可得到一种金额之和等于 i 的硬币组合。因此需要遍历 coins，对于其中的每一种面额的硬币，更新数组 dp 中的每个大于或等于该面额的元素的值。
     */
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        for (int coin : coins) {
            for (int i = 0; i + coin < amount + 1; i++) {
                dp[i + coin] += dp[i];
            }
        }
        return dp[amount];

    }
}
