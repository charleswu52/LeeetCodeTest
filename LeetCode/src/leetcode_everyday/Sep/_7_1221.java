package leetcode_everyday.Sep;

/**
 * @author WuChao
 * @create 2021/9/7 9:21
 */
public class _7_1221 {
    /**
     * 每日一题：2021/9/7
     * 1221. 分割平衡字符串
     * 难度：easy
     * <p>
     * 在一个 平衡字符串 中，'L' 和 'R' 字符的数量是相同的。
     *
     * 给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。
     *
     * 注意：分割得到的每个字符串都必须是平衡字符串。
     *
     * 返回可以通过分割得到的平衡字符串的 最大数量 。
     *
     * <p>
     * 示例 1：
     * 输入：s = "RLRRLLRLRL"
     * 输出：4
     * 解释：s 可以分割为 "RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。
     *
     * 示例 2：
     * 输入：s = "RLLLLRRRLR"
     * 输出：3
     * 解释：s 可以分割为 "RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。
     *
     * <p>
     * 注意:
     * 1 <= s.length <= 1000
     * s[i] = 'L' 或 'R'
     * s 是一个 平衡 字符串
     */

    /*
    思路：贪心算法
    根据题意，对于一个平衡字符串 s，若 s 能从中间某处分割成左右两个子串，若其中一个是平衡字符串，
    则另一个的 L 和 R 字符的数量必然是相同的，所以也一定是平衡字符串。

    为了最大化分割数量，我们可以不断循环，每次从 s 中分割出一个最短的平衡前缀，由于剩余部分也是平衡字符串，我们可以将其当作 s 继续分割，
    直至 s 为空时，结束循环。

    代码实现中，可以在遍历 s 时用一个变量 d 维护 L 和 R 字符的数量之差，当 d=0 时就说明找到了一个平衡字符串，将答案加一。
     */

    public int balancedStringSplit(String s) {
        int res = 0, d = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (ch == 'L') {
                ++d;
            } else {
                d--;
            }
            if (d == 0) {
                res++;
            }
        }
        return res;
    }

}
