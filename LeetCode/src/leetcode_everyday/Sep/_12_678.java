package leetcode_everyday.Sep;

/**
 * @author WuChao
 * @create 2021/9/12 9:17
 */
public class _12_678 {
    /**
     * 每日一题：2021/9/12
     * 678. 有效的括号字符串
     * 难度：medium
     * <p>
     * 给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：
     *  1.任何左括号 ( 必须有相应的右括号 )。
     *  2.任何右括号 ) 必须有相应的左括号 ( 。
     *  3.左括号 ( 必须在对应的右括号之前 )。
     *  4.可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
     *  5.一个空字符串也被视为有效字符串。
     *
     * 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 连续的1 的个数。
     * <p>
     * 示例 1:
     * 输入: "()"
     * 输出: True
     *
     * 示例 2:
     * 输入: "(*)"
     * 输出: True
     *
     * 示例 3:
     * 输入: "(*))"
     * 输出: True
     * <p>
     * 字符串大小将在 [1，100] 范围内
     */

    /*
    思路：动态规划
    假设字符串s的长度为n。定义dp[i][j] 表示字符串s从下标i到j的子串是否为有效的括号字符串，其中0<=i<=j<n
    动态规划边界情况是子串长度为1或2的情况
        当子串长度为1时，只有当该字符是'*'时，才是有效的括号字符串
        当子串长度为2时，只有当两个字符是"()"或者 "(*"或者"*)"或者"**"四种情况中的一种时，才是有效的括号字符串
    当子串长度大于2时，需要根据子串的首尾字符以及中间的字符判断子串是否为有效的括号字符串，只要满足以下一个条件就有dp[i][j] = true
        1. 如果s[i]和s[j]分别为左括号和右括号，或者为'*'，则当dp[i+1][j-1] = true 时 dp[i][j] = true
        2. 如果存在i<=k<j使得dp[i][k]和dp[k+1][j] 都为true，则dp[i][j] = true
      最终结果为dp[0][n-1]
     */
    public boolean checkValidString(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        // 子串长度为1的情况
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '*') {
                dp[i][i] = true;
            }
        }
        // 子串长度为2的情况
        for (int i = 1; i < n; i++) {
            char c1 = s.charAt(i - 1), c2 = s.charAt(i);
            dp[i - 1][i] = (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*');
        }
        // 其他情况
        for (int i = n - 3; i >= 0; i--) {
            char c1 = s.charAt(i);
            for (int j = i + 2; j < n; j++) {
                char c2 = s.charAt(j);
                if ((c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*')) {
                    dp[i][j] = dp[i + 1][j - 1];
                }
                for (int k = i; k < j && !dp[i][j]; k++) {
                    dp[i][j] = dp[i][k] && dp[k + 1][j];
                }
            }
        }
        return dp[0][n - 1];

    }

}
