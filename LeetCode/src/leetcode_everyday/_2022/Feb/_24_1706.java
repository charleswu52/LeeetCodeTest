package leetcode_everyday._2022.Feb;

import java.util.Arrays;

/**
 * @author WuChao
 * @create 2022/2/24 8:42
 */
public class _24_1706 {
    /**
     * 每日一题：2022/2/24
     * <p>
     * 1706. 球会落何处
     * <p>
     * 难度：medium
     * <p>
     * 用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。
     *
     * 箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
     *
     * 将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。
     * 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。
     * 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
     *
     * 返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。
     *
     * <p>
     * 示例
     * <p>
     * 输入：grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
     *
     * 输出：[1,-1,-1,-1,-1]
     *
     * 解释：示例如图：
     * b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
     * b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
     * b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
     * b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
     * b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
     * <p>
     * 范围
     * <p>
     * m == grid.length
     * n == grid[i].length
     * 1 <= m, n <= 100
     * grid[i][j] 为 1 或 -1
     */

    /*
    思路：模拟
    */

    public int[] findBall(int[][] grid) {
        int  n = grid[0].length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        for (int i = 0; i < n; i++) {
            int col = i; // 球的初始列
            for (int[] row : grid) { // 遍历盒子的每一行 球向左右移动
                int dir = row[col];
                col += dir;
                if (col < 0 || col == n || row[col] != dir) { // 球到达侧边或者 被V形挡住
                    col = -1;
                    break;
                }
            }
            if (col >= 0) {
                ans[i] = col;
            }
        }
        return ans;
    }
}
