package leetcode_everyday._2022.Feb;

/**
 * @author WuChao
 * @create 2022/2/27 8:51
 */
public class _27_553 {
    /**
     * 每日一题：2022/2/27
     * <p>
     * 553. 最优除法
     * <p>
     * 难度：medium
     * <p>
     * 给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如，[2,3,4] -> 2 / 3 / 4 。
     * <p>
     * 但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。
     * 你的表达式不应该含有冗余的括号。
     * <p>
     * 示例
     * <p>
     * 输入: [1000,100,10,2]
     * <p>
     * 输出: "1000/(100/10/2)"
     * <p>
     * 解释:
     * 1000/(100/10/2) = 1000/((100/10)/2) = 200
     * 但是，以下加粗的括号 "1000/((100/10)/2)" 是冗余的，
     * 因为他们并不影响操作的优先级，所以你需要返回 "1000/(100/10/2)"。
     * <p>
     * 其他用例:
     * 1000/(100/10)/2 = 50
     * 1000/(100/(10/2)) = 50
     * 1000/100/10/2 = 0.5
     * 1000/100/(10/2) = 2
     * <p>
     * 范围
     * <p>
     * 输入数组的长度在 [1, 10] 之间。
     * 数组中每个元素的大小都在 [2, 1000] 之间。
     * 每个测试用例只有一个最优除法解。
     */

    /*
    思路：贪心解法
    一串 >=1 的数字相除，怎么除才能得到最小的答案呢？

    答案就是从头除到尾，因为这样会导致分子越来越小，从而答案越来越小。

    如果你局部先除，那么会导致分母变小，从而导致答案变大。

    所以这道题，最终的解法就是，第一个 / (第二个/第三个....第n个)
     */
    public String optimalDivision(int[] nums) {
        StringBuilder res = new StringBuilder();
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            res.append(nums[i]);
            if (i + 1 < len) {
                res.append("/");
            }
        }
        if (len > 2) {
            res.insert(res.indexOf("/") + 1, "(");
            res.append(")");
        }
        return res.toString();
    }
}
