package leetcode_everyday._2021.Nov;

/**
 * @author WuChao
 * @create 2021/11/7 11:18
 */
public class _7_598 {
    /**
     * 每日一题：2021/11/7
     * <p>
     * 598. 范围求和 II
     * <p>
     * 难度：easy
     * <p>
     * 给定一个初始元素全部为 0，大小为 m*n 的矩阵 M 以及在 M 上的一系列更新操作。
     *
     * 操作用二维数组表示，其中的每个操作用一个含有两个正整数 a 和 b 的数组表示，
     * 含义是将所有符合 0 <= i < a 以及 0 <= j < b 的元素 M[i][j] 的值都增加 1。
     *
     * 在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。
     * <p>
     * 示例1：
     * <p>
     * 输入:
     * m = 3, n = 3
     * operations = [[2,2],[3,3]]
     *
     * 输出: 4
     *
     * 解释:
     * 初始状态, M =
     * [[0, 0, 0],
     *  [0, 0, 0],
     *  [0, 0, 0]]
     *
     * 执行完操作 [2,2] 后, M =
     * [[1, 1, 0],
     *  [1, 1, 0],
     *  [0, 0, 0]]
     *
     * 执行完操作 [3,3] 后, M =
     * [[2, 2, 1],
     *  [2, 2, 1],
     *  [1, 1, 1]]
     *
     * M 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。
     *
     * <p>
     * 范围
     * <p>
     * m 和 n 的范围是 [1,40000]。
     * a 的范围是 [1,m]，b 的范围是 [1,n]。
     * 操作数目不超过 10000。
     */

    /*
    思路：数学题 模拟
    由于每次都是对 0≤i<a 和 0≤j<b 进行操作，因此每次操作都会包含点 (0,0)，最后的最大值一定出现在位置 (0,0) 上。

    问题转换为：什么范围内的数与位置 (0, 0) 上的值相等，即什么范围会被每一次操作所覆盖。

    不难发现，在所有的 ops[i] 中的横纵坐标 (x, y) 与左上角 (0, 0) 形成的区域面积可确保被每次操作覆盖，x * y 即是答案。
    */
    public int maxCount(int m, int n, int[][] ops) {
        int minM = m, minN = n;
        for (int[] op : ops) {
            minM = Math.min(minM, op[0]);
            minN = Math.min(minN, op[1]);
        }
        return minM * minN;


    }
}
