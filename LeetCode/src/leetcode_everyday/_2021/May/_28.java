package leetcode_everyday._2021.May;

/**
 * @author WuChao
 * @since 2021/5/28 上午8:02
 */
public class _28 {
    /**
     * 每日一题：2021/5/28
     * 477. 汉明距离总和
     * 难度: medium
     * <p>
     * 两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。
     * 计算一个数组中，任意两个数之间汉明距离的总和。
     * <p>
     * 示例:
     * 输入: 4, 14, 2
     * 输出: 6
     *
     * 解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）
     * 所以答案为：
     * HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
     * <p>
     * 数据范围：
     * 数组中元素的范围为从 0到 10^9。
     * 数组的长度不超过 10^4。
     */

    /*
    题目分析：
    自己的思路分析：
        如果按照题目描述的那样直接来做的话，计算两两元素的汉明距离，即求两两元素异或结果中 1 的个数，最后将所有的结果相加，
        这样的时间复杂度 达到了O(n^2) 。这样的暴力做法肯定会超时，需要思考优化方法。

     */

    /*
    参考思路1：
    不要老是陷于求异或运算的优化运算上，反而忘记了题目最开始是要统计不同元素的汉明距离。
    一个优化的思路是统计每一位上0的数目，然后乘以1的数目（剩余元素），将每一位的结果累加，这样就得到了总的结果。
    这样做的目的是，因为要统计1元素的个数，通过求1元素的个数会计算出对其他元素产生的影响，进而知道所有元素相加产生的结果
     */

    public int totalHammingDistance(int[] nums) {
        int res = 0;
        int zero = 0;
        for (int i = 0; i < 30; i++) {
            zero = 0;
            for (int j = 0; j < nums.length; j++) {
                if ((nums[j] >> i & 1) == 1) {
                    zero++;
                }
            }
            res += zero * (nums.length - zero);
        }
        return res;

    }
}
