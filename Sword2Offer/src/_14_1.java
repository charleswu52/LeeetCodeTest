/**
 * @author WuChao
 * @since 2021/3/13 上午9:01
 */
public class _14_1 {
    /**
     * 剑指 Offer 14- I. 剪绳子
     * 难度: medium
     * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。
     * 请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
     * <p>
     * 示例：
     * 输入: 10
     * 输出: 36
     * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
     *
     * <p>
     * 数据范围：
     * 2 <= n <= 58
     */

    /**
     * 题目解析：这里涉及到数学证明
     * 将长度为n的绳子等分时，此时所有段乘机是最大的 ，根据"算术几何均值不等式"知道。
     * 因此将n长度等分为a段，每段长x。 对乘积公式求导，x=e时，取得极值点，x为整数对应为3
     * 因此每段长度应该裁剪为3
     * 对剩余的，长度为2时，不再裁剪；剩余长度为1将前面一根3的与1 变成2*2的
     *
     */
    /**
     * 算法实现
     * 1.当n<=3时，按最优策略是不切分，但是题目要求必须切分，因此必须剪出一根长度为1的，返回n-1
     * 2.当n>3时，求n除以3的整数部分和余数部分，n=3a+b:
     * b=0时候，返回3^a
     * b=1时，返回3^(a-1)*4
     * b=2时候，返回3^a**2
     */
    public int cuttingRope(int n) {
        if (n <= 3) {
            return n - 1;

        }
        int a = n / 3, b = n % 3;
        if (b == 0) {
            return (int) Math.pow(3, a);
        }
        if (b == 1) {
            return (int) Math.pow(3, a - 1) * 4;
        }

        return (int) Math.pow(3, a) * 2;


    }

    public void sword2Offer_14_1() {
        int n = 10;
        System.out.println(cuttingRope(n));

    }
}
